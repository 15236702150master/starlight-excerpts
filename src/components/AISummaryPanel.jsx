import React, { useState, useEffect, useRef } from 'react'
import { Brain, Loader2, RefreshCw, Copy, CheckCircle, AlertCircle, ChevronDown, ChevronUp, Settings, Key } from 'lucide-react'
import { marked } from 'marked'
import { saveAISummary, getAISummary } from '../utils/storage'
import APIKeyConfig from './APIKeyConfig'
import './AISummaryPanel.css'

const AISummaryPanel = ({ article, onSummaryGenerated }) => {
  const [summary, setSummary] = useState('')
  const [isLoading, setIsLoading] = useState(false)
  const [error, setError] = useState(null)
  const [isCollapsed, setIsCollapsed] = useState(false)
  const [copySuccess, setCopySuccess] = useState(false)
  const [autoSummaryTriggered, setAutoSummaryTriggered] = useState(false)
  const [showPlatformSelector, setShowPlatformSelector] = useState(false)
  const [availablePlatforms, setAvailablePlatforms] = useState([])
  const [selectedPlatform, setSelectedPlatform] = useState('deepseek')
  const [selectedModel, setSelectedModel] = useState('')
  const [showAPIKeyConfig, setShowAPIKeyConfig] = useState(false)
  const [apiKeys, setApiKeys] = useState({})
  const summaryRef = useRef(null)

  // ÈÖçÁΩÆmarkedÈÄâÈ°π
  useEffect(() => {
    marked.setOptions({
      breaks: true,
      gfm: true,
      headerIds: false,
      mangle: false
    })
  }, [])

  // Ëé∑ÂèñÂèØÁî®ÁöÑAIÂπ≥Âè∞ÂíåÂä†ËΩΩAPIÂØÜÈí•
  useEffect(() => {
    fetchAvailablePlatforms()
    loadAPIKeys()
  }, [])

  // Âä†ËΩΩ‰øùÂ≠òÁöÑAPIÂØÜÈí•
  const loadAPIKeys = () => {
    try {
      const savedKeys = localStorage.getItem('ai_api_keys')
      if (savedKeys) {
        const parsed = JSON.parse(savedKeys)
        setApiKeys(parsed)
      }
    } catch (error) {
      console.error('Âä†ËΩΩAPIÂØÜÈí•Â§±Ë¥•:', error)
    }
  }

  const fetchAvailablePlatforms = async () => {
    try {
      const response = await fetch('http://localhost:3001/api/platforms')
      if (response.ok) {
        const data = await response.json()
        setAvailablePlatforms(data.data)

        // ËÆæÁΩÆÈªòËÆ§ÈÄâÊã©ÁöÑÊ®°Âûã
        const deepseekPlatform = data.data.find(p => p.id === 'deepseek')
        if (deepseekPlatform) {
          setSelectedModel(deepseekPlatform.models[0])
        }
      }
    } catch (error) {
      console.error('Ëé∑ÂèñAIÂπ≥Âè∞ÂàóË°®Â§±Ë¥•:', error)
    }
  }

  // Ê£ÄÊü•ÊòØÂê¶Â∑≤ÊúâÊÄªÁªìÔºåÂ¶ÇÊûúÊ≤°ÊúâÂàôËá™Âä®ÁîüÊàê
  useEffect(() => {
    if (article && article.content && !autoSummaryTriggered) {
      setAutoSummaryTriggered(true)

      // ÂÖàÊ£ÄÊü•ÊòØÂê¶Â∑≤Êúâ‰øùÂ≠òÁöÑÊÄªÁªì
      const existingSummary = getAISummary(article.id)
      if (existingSummary) {
        setSummary(existingSummary.summary)
        console.log('Âä†ËΩΩÂ∑≤‰øùÂ≠òÁöÑAIÊÄªÁªì')
      } else {
        // Âª∂Ëøü‰∏ÄÁÇπÊó∂Èó¥ËÆ©È°µÈù¢Âä†ËΩΩÂÆåÊàêÂêéËá™Âä®ÁîüÊàêÊÄªÁªì
        setTimeout(() => {
          generateSummary()
        }, 1000)
      }
    }
  }, [article, autoSummaryTriggered])

  const generateSummary = async (platform = selectedPlatform, model = selectedModel) => {
    if (!article?.content) {
      setError('ÊñáÊ°£ÂÜÖÂÆπ‰∏∫Á©∫ÔºåÊó†Ê≥ïÁîüÊàêÊÄªÁªì')
      return
    }

    // Ê£ÄÊü•ÊòØÂê¶ÊúâAPIÂØÜÈí•
    const hasValidKeys = Object.values(apiKeys).some(key => key && key.trim() !== '')
    if (!hasValidKeys) {
      setError('ËØ∑ÂÖàÈÖçÁΩÆAIÂπ≥Âè∞ÁöÑAPIÂØÜÈí•')
      return
    }

    setIsLoading(true)
    setError(null)
    setSummary('')

    try {
      console.log('ÂºÄÂßãÁîüÊàêAIÊÄªÁªì...')
      console.log('‰ΩøÁî®Âπ≥Âè∞:', platform)
      console.log('‰ΩøÁî®Ê®°Âûã:', model)

      const response = await fetch('http://localhost:3001/api/summarize', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          content: article.content,
          title: article.title,
          platform: platform,
          model: model,
          apiKeys: apiKeys
        })
      })

      const data = await response.json()

      if (data.success) {
        // ‰ºòÂåñÊÄªÁªìÊ†ºÂºèÔºåÁ°Æ‰øùMarkdownÁªìÊûÑÊ∏ÖÊô∞
        const optimizedSummary = optimizeSummaryFormat(data.data.summary)
        setSummary(optimizedSummary)

        // ‰øùÂ≠òÊÄªÁªìÂà∞localStorage
        const summaryData = {
          summary: optimizedSummary,
          model: data.data.model || model,
          platform: data.data.platform || platform,
          timestamp: data.data.timestamp,
          usage: data.data.usage
        }
        saveAISummary(article.id, summaryData)

        // ÈÄöÁü•Áà∂ÁªÑ‰ª∂ÊÄªÁªìÂ∑≤ÁîüÊàê
        if (onSummaryGenerated) {
          onSummaryGenerated({
            articleId: article.id,
            ...summaryData
          })
        }
      } else {
        throw new Error(data.error || 'ÁîüÊàêÊÄªÁªìÂ§±Ë¥•')
      }
    } catch (error) {
      console.error('AIÊÄªÁªìÈîôËØØ:', error)
      if (error.message.includes('fetch')) {
        setError('Êó†Ê≥ïËøûÊé•Âà∞AIÊúçÂä°ÔºåËØ∑Á°Æ‰øùÂêéÁ´ØÊúçÂä°Â∑≤ÂêØÂä® (http://localhost:3001)')
      } else {
        setError(error.message || 'ÁîüÊàêÊÄªÁªìÊó∂ÂèëÁîüÈîôËØØ')
      }
    } finally {
      setIsLoading(false)
    }
  }

  // ‰ºòÂåñÊÄªÁªìÊ†ºÂºèÔºåÁ°Æ‰øùÊ∏ÖÊô∞ÁöÑÂ±ÇÊ¨°ÁªìÊûÑÂíåËàíÈÄÇÁöÑÈòÖËØª‰ΩìÈ™å
  const optimizeSummaryFormat = (rawSummary) => {
    let formatted = rawSummary

    // Á°Æ‰øùÊúâ‰∏ªÊ†áÈ¢ò
    if (!formatted.startsWith('#')) {
      formatted = `# üìÑ ÊñáÊ°£ÊÄªÁªì\n\n${formatted}`
    }

    // ‰ºòÂåñÊÄªÁªìÁªìÊûÑÔºå‰ΩøÁî®Ê∏ÖÊô∞ÁöÑÊ†áËØÜÁ¨¶
    formatted = formatted
      // Ê†áÂáÜÂåñÊ†∏ÂøÉÁêÜÂøµÊ†áËØÜ
      .replace(/Ê†∏ÂøÉÁêÜÂøµ[Ôºö:]/g, '**Ê†∏ÂøÉÁêÜÂøµÔºö**')
      .replace(/‰∏ªË¶ÅËßÇÁÇπ[Ôºö:]/g, '**‰∏ªË¶ÅËßÇÁÇπÔºö**')
      .replace(/ÂÖ≥ÈîÆÁªìËÆ∫[Ôºö:]/g, '**ÂÖ≥ÈîÆÁªìËÆ∫Ôºö**')
      .replace(/Ê†∏ÂøÉÂÜÖÂÆπ[Ôºö:]/g, '**Ê†∏ÂøÉÂÜÖÂÆπÔºö**')
      .replace(/ÈáçË¶ÅË¶ÅÁÇπ[Ôºö:]/g, '**ÈáçË¶ÅË¶ÅÁÇπÔºö**')
      .replace(/‰∏ªË¶ÅËÆ∫ÁÇπ[Ôºö:]/g, '**‰∏ªË¶ÅËÆ∫ÁÇπÔºö**')

      // ‰ºòÂåñÊÆµËêΩÁªìÊûÑ
      // Á°Æ‰øùÊ†áÈ¢òÂâçÂêéÊúâÁ©∫Ë°å
      .replace(/([^\n])\n(#{1,6}\s)/g, '$1\n\n$2')
      .replace(/(#{1,6}[^\n]+)\n([^#\n])/g, '$1\n\n$2')

      // Á°Æ‰øùÈáçË¶ÅÊ†áËØÜÂâçÂêéÊúâÈÄÇÂΩìÁ©∫Ë°å
      .replace(/([^\n])\n(\*\*[^*]+Ôºö\*\*)/g, '$1\n\n$2')
      .replace(/(\*\*[^*]+Ôºö\*\*[^\n]*)\n([^\n*])/g, '$1\n\n$2')

      // ‰ºòÂåñÂàóË°®Ê†ºÂºè
      .replace(/([^\n])\n([*\-+]\s)/g, '$1\n\n$2')
      .replace(/([*\-+][^\n]+)\n([^*\-+\n])/g, '$1\n\n$2')

      // ‰ºòÂåñÊï∞Â≠óÂàóË°®Ê†ºÂºè
      .replace(/([^\n])\n(\d+\.\s)/g, '$1\n\n$2')
      .replace(/(\d+\.[^\n]+)\n([^\d\n])/g, '$1\n\n$2')

      // Ê∏ÖÁêÜÂ§ö‰ΩôÁ©∫Ë°åÔºå‰ΩÜ‰øùÊåÅÈÄÇÂΩìÁöÑÊÆµËêΩÈó¥Ë∑ù
      .replace(/\n{4,}/g, '\n\n\n')
      .replace(/\n{3}/g, '\n\n')
      .trim()

    // Á°Æ‰øùÊÄªÁªìÊúâËâØÂ•ΩÁöÑÁªìÊûÑ
    if (!formatted.includes('**Ê†∏ÂøÉÁêÜÂøµÔºö**') && !formatted.includes('**‰∏ªË¶ÅËßÇÁÇπÔºö**')) {
      // Â¶ÇÊûúAIÊ≤°Êúâ‰ΩøÁî®Ê†áÂáÜÊ†ºÂºèÔºåÂ∞ùËØïËá™Âä®Ê∑ªÂä†ÁªìÊûÑ
      const lines = formatted.split('\n').filter(line => line.trim())
      if (lines.length > 3) {
        // ÁÆÄÂçïÁöÑÁªìÊûÑÂåñÂ§ÑÁêÜ
        formatted = formatted.replace(/^(# [^\n]+\n\n)/, '$1**Ê†∏ÂøÉÂÜÖÂÆπÔºö**\n\n')
      }
    }

    return formatted
  }

  // Â§çÂà∂Á∫ØÊñáÊú¨ÂÜÖÂÆπÔºàÂéªÈô§MarkdownÊ†ºÂºèÔºâ
  const handleCopy = async () => {
    if (!summary) return

    try {
      // Â∞ÜMarkdownËΩ¨Êç¢‰∏∫Á∫ØÊñáÊú¨
      const tempDiv = document.createElement('div')
      tempDiv.innerHTML = marked(summary)
      const plainText = tempDiv.textContent || tempDiv.innerText || ''
      
      await navigator.clipboard.writeText(plainText)
      setCopySuccess(true)
      setTimeout(() => setCopySuccess(false), 2000)
    } catch (error) {
      console.error('Â§çÂà∂Â§±Ë¥•:', error)
      // ÈôçÁ∫ßÊñπÊ°àÔºöÂ§çÂà∂ÂéüÂßãÊñáÊú¨
      try {
        await navigator.clipboard.writeText(summary)
        setCopySuccess(true)
        setTimeout(() => setCopySuccess(false), 2000)
      } catch (fallbackError) {
        console.error('ÈôçÁ∫ßÂ§çÂà∂‰πüÂ§±Ë¥•:', fallbackError)
      }
    }
  }

  const handleRetry = () => {
    setError(null)
    setSummary('')
    generateSummary()
  }

  // Â§ÑÁêÜAPIÂØÜÈí•ÈÖçÁΩÆ
  const handleAPIKeySave = (newKeys) => {
    setApiKeys(newKeys)
    setShowAPIKeyConfig(false)
  }

  const toggleCollapse = () => {
    setIsCollapsed(!isCollapsed)
  }

  if (!article) return null

  return (
    <div className="ai-summary-panel">
      <div className="ai-summary-panel-header" onClick={toggleCollapse}>
        <div className="ai-summary-panel-title">
          <Brain className="ai-summary-panel-icon" />
          <h3>AIÊô∫ËÉΩÊÄªÁªì</h3>
          {summary && !isLoading && (
            <span className="ai-summary-panel-badge">Â∑≤ÁîüÊàê</span>
          )}
        </div>
        <div className="ai-summary-panel-controls">
          <button
            className="ai-summary-settings-btn"
            onClick={(e) => {
              e.stopPropagation()
              setShowAPIKeyConfig(true)
            }}
            title="ÈÖçÁΩÆAPIÂØÜÈí•"
          >
            <Key size={16} />
          </button>
          <button
            className="ai-summary-settings-btn"
            onClick={(e) => {
              e.stopPropagation()
              setShowPlatformSelector(!showPlatformSelector)
            }}
            title="AIÂπ≥Âè∞ËÆæÁΩÆ"
          >
            <Settings size={16} />
          </button>
          {summary && !isLoading && (
            <button
              className="ai-summary-copy-btn"
              onClick={(e) => {
                e.stopPropagation()
                handleCopy()
              }}
              title="Â§çÂà∂ÊÄªÁªìÂÜÖÂÆπ"
            >
              {copySuccess ? <CheckCircle size={16} /> : <Copy size={16} />}
            </button>
          )}
          <button className="ai-summary-collapse-btn">
            {isCollapsed ? <ChevronDown size={20} /> : <ChevronUp size={20} />}
          </button>
        </div>
      </div>

      {!isCollapsed && (
        <div className="ai-summary-panel-content">
          {showPlatformSelector && (
            <div className="ai-platform-selector">
              <h4>ÈÄâÊã©AIÂπ≥Âè∞</h4>
              <div className="platform-options">
                {availablePlatforms.map(platform => (
                  <div key={platform.id} className="platform-option">
                    <label className="platform-label">
                      <input
                        type="radio"
                        name="platform"
                        value={platform.id}
                        checked={selectedPlatform === platform.id}
                        onChange={(e) => {
                          setSelectedPlatform(e.target.value)
                          const models = platform.models || []
                          setSelectedModel(models[0] || '')
                        }}
                      />
                      <div className="platform-info">
                        <span className="platform-name">{platform.name}</span>
                        <span className="platform-desc">{platform.description}</span>
                        {!platform.available && (
                          <span className="platform-unavailable">ÈúÄË¶ÅÈÖçÁΩÆAPIÂØÜÈí•</span>
                        )}
                      </div>
                    </label>
                    {selectedPlatform === platform.id && platform.models && platform.models.length > 1 && (
                      <select
                        className="model-selector"
                        value={selectedModel}
                        onChange={(e) => setSelectedModel(e.target.value)}
                      >
                        {platform.models.map(model => (
                          <option key={model} value={model}>{model}</option>
                        ))}
                      </select>
                    )}
                  </div>
                ))}
              </div>
              <div className="platform-actions">
                <button
                  className="generate-with-platform-btn"
                  onClick={() => {
                    setShowPlatformSelector(false)
                    generateSummary(selectedPlatform, selectedModel)
                  }}
                  disabled={!availablePlatforms.find(p => p.id === selectedPlatform)?.available}
                >
                  ‰ΩøÁî®Ê≠§Âπ≥Âè∞ÁîüÊàêÊÄªÁªì
                </button>
              </div>
            </div>
          )}

          {isLoading && (
            <div className="ai-summary-loading">
              <Loader2 className="ai-summary-spinner" />
              <p>AIÊ≠£Âú®ÂàÜÊûêÊñáÊ°£ÂÜÖÂÆπÔºåÁîüÊàêÊô∫ËÉΩÊÄªÁªì...</p>
              <div className="ai-summary-progress">
                <div className="ai-summary-progress-bar"></div>
              </div>
            </div>
          )}

          {error && (
            <div className="ai-summary-error">
              <AlertCircle className="ai-summary-error-icon" />
              <div className="ai-summary-error-content">
                <h4>ÊÄªÁªìÁîüÊàêÂ§±Ë¥•</h4>
                <p>{error}</p>
                <button 
                  className="ai-summary-retry-btn"
                  onClick={handleRetry}
                >
                  <RefreshCw size={16} />
                  ÈáçÊñ∞ÁîüÊàê
                </button>
              </div>
            </div>
          )}

          {summary && !isLoading && (
            <div className="ai-summary-result">
              <div className="ai-summary-actions">
                <button 
                  className="ai-summary-action-btn"
                  onClick={handleCopy}
                  title="Â§çÂà∂ÊÄªÁªìÂÜÖÂÆπÔºàÁ∫ØÊñáÊú¨Ôºâ"
                >
                  {copySuccess ? (
                    <>
                      <CheckCircle size={16} />
                      Â∑≤Â§çÂà∂
                    </>
                  ) : (
                    <>
                      <Copy size={16} />
                      Â§çÂà∂ÂÜÖÂÆπ
                    </>
                  )}
                </button>
                <button 
                  className="ai-summary-action-btn"
                  onClick={handleRetry}
                  title="ÈáçÊñ∞ÁîüÊàêÊÄªÁªì"
                >
                  <RefreshCw size={16} />
                  ÈáçÊñ∞ÁîüÊàê
                </button>
              </div>
              
              <div
                className="ai-summary-markdown-content"
                ref={summaryRef}
              >
                {summary}
              </div>
            </div>
          )}

          {!summary && !isLoading && !error && (
            <div className="ai-summary-placeholder">
              <Brain className="ai-summary-placeholder-icon" />
              {Object.values(apiKeys).some(key => key && key.trim() !== '') ? (
                <p>AIÊÄªÁªìÂ∞ÜÂú®ÊñáÊ°£Âä†ËΩΩÂÆåÊàêÂêéËá™Âä®ÁîüÊàê</p>
              ) : (
                <div className="api-key-required">
                  <p>ÈúÄË¶ÅÈÖçÁΩÆAIÂπ≥Âè∞APIÂØÜÈí•ÊâçËÉΩ‰ΩøÁî®ÊÄªÁªìÂäüËÉΩ</p>
                  <button
                    className="config-api-key-btn"
                    onClick={() => setShowAPIKeyConfig(true)}
                  >
                    <Key size={16} />
                    ÈÖçÁΩÆAPIÂØÜÈí•
                  </button>
                </div>
              )}
            </div>
          )}
        </div>
      )}

      <div className="ai-summary-panel-footer">
        <span className="ai-summary-powered">
          <Brain size={12} />
          Áî±AIÂ§ßÊ®°ÂûãÊèê‰æõÊîØÊåÅ
        </span>
      </div>

      {/* APIÂØÜÈí•ÈÖçÁΩÆÁªÑ‰ª∂ */}
      <APIKeyConfig
        isOpen={showAPIKeyConfig}
        onClose={() => setShowAPIKeyConfig(false)}
        onSave={handleAPIKeySave}
      />
    </div>
  )
}

export default AISummaryPanel
